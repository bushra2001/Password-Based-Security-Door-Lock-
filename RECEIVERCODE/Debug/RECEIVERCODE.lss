
RECEIVERCODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007fd  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a1  00000000  00000000  00000a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000320  00000000  00000000  0000113a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019d  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
#include <avr/io.h>
#define F_CPU 1000000UL
#include<util/delay.h>

int main(void)
{
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	68 97       	sbiw	r28, 0x18	; 24
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	f8 94       	cli
  96:	de bf       	out	0x3e, r29	; 62
  98:	0f be       	out	0x3f, r0	; 63
  9a:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0x01; //Makes RB0 output pin
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  a0:	18 ba       	out	0x18, r1	; 24
	

	int index = 0;
	char digit[20]=
  a2:	fe 01       	movw	r30, r28
  a4:	31 96       	adiw	r30, 0x01	; 1
  a6:	84 e1       	ldi	r24, 0x14	; 20
  a8:	df 01       	movw	r26, r30
  aa:	1d 92       	st	X+, r1
  ac:	8a 95       	dec	r24
  ae:	e9 f7       	brne	.-6      	; 0xaa <main+0x22>
  b0:	97 e3       	ldi	r25, 0x37	; 55
  b2:	99 83       	std	Y+1, r25	; 0x01
  b4:	28 e3       	ldi	r18, 0x38	; 56
  b6:	2a 83       	std	Y+2, r18	; 0x02
  b8:	39 e3       	ldi	r19, 0x39	; 57
  ba:	3b 83       	std	Y+3, r19	; 0x03
  bc:	8f e2       	ldi	r24, 0x2F	; 47
  be:	8c 83       	std	Y+4, r24	; 0x04
  c0:	84 e3       	ldi	r24, 0x34	; 52
  c2:	8d 83       	std	Y+5, r24	; 0x05
  c4:	85 e3       	ldi	r24, 0x35	; 53
  c6:	8e 83       	std	Y+6, r24	; 0x06
  c8:	86 e3       	ldi	r24, 0x36	; 54
  ca:	8f 83       	std	Y+7, r24	; 0x07
  cc:	4a e2       	ldi	r20, 0x2A	; 42
  ce:	48 87       	std	Y+8, r20	; 0x08
  d0:	41 e3       	ldi	r20, 0x31	; 49
  d2:	49 87       	std	Y+9, r20	; 0x09
  d4:	42 e3       	ldi	r20, 0x32	; 50
  d6:	4a 87       	std	Y+10, r20	; 0x0a
  d8:	43 e3       	ldi	r20, 0x33	; 51
  da:	4b 87       	std	Y+11, r20	; 0x0b
  dc:	4d e2       	ldi	r20, 0x2D	; 45
  de:	4c 87       	std	Y+12, r20	; 0x0c
  e0:	41 e4       	ldi	r20, 0x41	; 65
  e2:	4d 87       	std	Y+13, r20	; 0x0d
  e4:	40 e3       	ldi	r20, 0x30	; 48
  e6:	4e 87       	std	Y+14, r20	; 0x0e
  e8:	4d e3       	ldi	r20, 0x3D	; 61
  ea:	4f 87       	std	Y+15, r20	; 0x0f
  ec:	4b e2       	ldi	r20, 0x2B	; 43
  ee:	48 8b       	std	Y+16, r20	; 0x10
		'7','8','9','/',
		'4','5','6','*',
		'1','2','3','-',
		'A','0','=','+','\0'
	};
	char Original_Password[4] = {'9','8','7','6'};
  f0:	3d 8b       	std	Y+21, r19	; 0x15
  f2:	2e 8b       	std	Y+22, r18	; 0x16
  f4:	9f 8b       	std	Y+23, r25	; 0x17
  f6:	88 8f       	std	Y+24, r24	; 0x18
	char push_button;
	DDRD&=~(1<<PD0);
  f8:	81 b3       	in	r24, 0x11	; 17
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	81 bb       	out	0x11, r24	; 17
	DDRD|=(1<<PD1);
  fe:	81 b3       	in	r24, 0x11	; 17
 100:	82 60       	ori	r24, 0x02	; 2
 102:	81 bb       	out	0x11, r24	; 17
	DDRA=0XFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8a bb       	out	0x1a, r24	; 26
	DDRC=0XFF;
 108:	84 bb       	out	0x14, r24	; 20
	UBRR0H=0X00;
 10a:	10 bc       	out	0x20, r1	; 32
	UBRR0L=0X05;
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	89 b9       	out	0x09, r24	; 9
	UCSR0B=(1<<RXEN0);
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=(1<<USBS0)|(3<<UCSZ00);
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	80 bd       	out	0x20, r24	; 32
{
	DDRB = 0x01; //Makes RB0 output pin
	PORTB = 0x00;
	

	int index = 0;
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
	UCSR0B=(1<<RXEN0);
	UCSR0C=(1<<USBS0)|(3<<UCSZ00);
	unsigned char receiveData;
	while(1)
	{
		push_button = PINB&00000001;
 11c:	86 b3       	in	r24, 0x16	; 22
 11e:	81 70       	andi	r24, 0x01	; 1
		PORTC = 0;
 120:	15 ba       	out	0x15, r1	; 21
		receiveData = 0;
		while(!(UCSR0A&(1<<RXC0)));
 122:	5f 9b       	sbis	0x0b, 7	; 11
 124:	fe cf       	rjmp	.-4      	; 0x122 <main+0x9a>
		receiveData=UDR0;
 126:	9c b1       	in	r25, 0x0c	; 12
		PORTC=receiveData;
 128:	95 bb       	out	0x15, r25	; 21
		if(receiveData!=16)
 12a:	90 31       	cpi	r25, 0x10	; 16
 12c:	91 f0       	breq	.+36     	; 0x152 <main+0xca>
		{
			if(digit[receiveData]==Original_Password[index]){
 12e:	e1 e0       	ldi	r30, 0x01	; 1
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	ec 0f       	add	r30, r28
 134:	fd 1f       	adc	r31, r29
 136:	e9 0f       	add	r30, r25
 138:	f1 1d       	adc	r31, r1
 13a:	40 81       	ld	r20, Z
 13c:	e5 e1       	ldi	r30, 0x15	; 21
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	ec 0f       	add	r30, r28
 142:	fd 1f       	adc	r31, r29
 144:	e2 0f       	add	r30, r18
 146:	f3 1f       	adc	r31, r19
 148:	90 81       	ld	r25, Z
 14a:	49 13       	cpse	r20, r25
 14c:	02 c0       	rjmp	.+4      	; 0x152 <main+0xca>
				index++; // incrementing index
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
			}
		}
		if (push_button==1)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	61 f4       	brne	.+24     	; 0x16e <main+0xe6>
		{
			index=0;
			PORTA=0b11111111;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f e4       	ldi	r24, 0x4F	; 79
 15c:	93 ec       	ldi	r25, 0xC3	; 195
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0xd6>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0xdc>
 164:	00 00       	nop
			_delay_ms(200);
			UDR0=0b11110000;
 166:	80 ef       	ldi	r24, 0xF0	; 240
 168:	8c b9       	out	0x0c, r24	; 12
				index++; // incrementing index
			}
		}
		if (push_button==1)
		{
			index=0;
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
			// If Push button is Pressed then 7-segment will
			//change from Open(O) to Close(C)
		}


		if (index==4)
 16e:	24 30       	cpi	r18, 0x04	; 4
 170:	31 05       	cpc	r19, r1
 172:	b1 f4       	brne	.+44     	; 0x1a0 <main+0x118>
		{

			//Rotate Motor to 90 degree
			PORTC = 0x01;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	85 bb       	out	0x15, r24	; 21
 178:	9f ed       	ldi	r25, 0xDF	; 223
 17a:	a3 e9       	ldi	r26, 0x93	; 147
 17c:	b4 e0       	ldi	r27, 0x04	; 4
 17e:	91 50       	subi	r25, 0x01	; 1
 180:	a0 40       	sbci	r26, 0x00	; 0
 182:	b0 40       	sbci	r27, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0xf6>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x100>
 188:	00 00       	nop
			_delay_ms(1500);
			PORTC = 0x00;
 18a:	15 ba       	out	0x15, r1	; 21
 18c:	4f e7       	ldi	r20, 0x7F	; 127
 18e:	8a e1       	ldi	r24, 0x1A	; 26
 190:	96 e0       	ldi	r25, 0x06	; 6
 192:	41 50       	subi	r20, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x10a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x114>
 19c:	00 00       	nop
 19e:	be cf       	rjmp	.-132    	; 0x11c <main+0x94>


		}
		else
		{
			UDR0=0b11000110;
 1a0:	86 ec       	ldi	r24, 0xC6	; 198
 1a2:	8c b9       	out	0x0c, r24	; 12
 1a4:	af e3       	ldi	r26, 0x3F	; 63
 1a6:	bd e0       	ldi	r27, 0x0D	; 13
 1a8:	43 e0       	ldi	r20, 0x03	; 3
 1aa:	a1 50       	subi	r26, 0x01	; 1
 1ac:	b0 40       	sbci	r27, 0x00	; 0
 1ae:	40 40       	sbci	r20, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x122>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x12c>
 1b4:	00 00       	nop
 1b6:	b2 cf       	rjmp	.-156    	; 0x11c <main+0x94>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
